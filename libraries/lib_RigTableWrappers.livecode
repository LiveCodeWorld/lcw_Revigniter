script "lib_RigTableWrappers"
--> MetaData
-
copyright: David Bovill
license: GPLv3
name: lib_RigTableWrappers
type: script library
version: 0.1


--> revIgniter | Compatibility
-
/*
A set of wrappers around revIgniter to handle case where we use old terminology.
That is where handlers call the original revIgniter code instead of the newly renamed code.
They should not be needed for new coding.
Except if it proves useful to seperate out revIgniter compatibility, and to keep the new terminology as optional
Then these handlers could work with a library of private handlers that are used as a behavior of script only stack.,
or included at the end
*/

--> revIgniter | Compatibility | Table.lc
-
command rigSetTableTemplate pTemplate
   table_SetTemplate pTemplate
end rigSetTableTemplate

command rigSetTableHeading pHeading, pFirstUpper
   table_SetHeading pHeading, pFirstUpper
end rigSetTableHeading

function rigMakeTableColumns pArray, pColLimit
   return table_MakeColumns (pArray, pColLimit)
end rigMakeTableColumns

command rigSetEmptyCellVal pValue
   table_SetEmptyCellDefault pValue
end rigSetEmptyCellVal

command rigAddTableRow pRow
   table_AddRow pRow
end rigAddTableRow

command rigSetTableCaption pCaption
   put pCaption into sCaption
end rigSetTableCaption

function rigGenerateTable pTableData
   return table_Construct (pTableData)
end rigGenerateTable

command rigClearTableVars
   table_ClearVars
end rigClearTableVars

command rigCompileTableTemplate
   table_CompileTemplate
end rigCompileTableTemplate


--> Should be Private 
-
command _rigSetTableData pData, pSetHeading
   _setTableData pData, pSetHeading
end _rigSetTableData

function _rigDefaultTableTemplate
   return table_DefaultTemplate()
end _rigDefaultTableTemplate


--> revIgniter | Compatibility | Array.lc
-
function rigArrayElement pItem, pArray, pDefault
   --| Summary: Lets you determine whether an array index is set and whether it has a value.
   --|                    if the value does not exist it returns FALSE (or whatever you specify as the default value).
   --| Parameters: string <pItem>, array <pArray>, mixed <pDefault> 
   --| Return: mixed
   
   if pDefault is empty then
      put FALSE into tDefault
   else
      put pDefault into tDefault
   end if
   
   if pArray[pItem] is empty then
      --if pItem is not among the keys of pArray then
      return tDefault
   end if
   
   return pArray[pItem]
end rigArrayElement

function rigArrayRandElement pArray
   --| Summary: Takes an array as input and returns a random element.
   --|                    Works with one-dimensional arrays only
   --| Return: mixed
   
   if pArray is not an array then
      return pArray
   end if
   put any line in the keys of pArray into tKey
   return pArray [tKey]
end rigArrayRandElement

function rigArrayKeys pAssocArray
   --| Summary: Returns the keys, numeric and string, from the input array.
   put 0 into tCounter
   repeat for each key tKey in pAssocArray
      add 1 to tCounter
      put tKey into tKeysArray[tCounter]
   end repeat
   
   return tKeysArray
end rigArrayKeys

function rigArrayValues pAssocArray, pUseApostrophe
   --| Summary: Returns all the values from the input array and indexes numerically the array.
   --| Parameters: array <pAssocArray>, bool <pUseApostrophe>
   
   put 0 into tCounter
   repeat for each key tKey in pAssocArray
      add 1 to tCounter
      if pUseApostrophe is TRUE then
         put "'" & pAssocArray[tKey] & "'" into tValuesArray[tCounter]
      else
         put pAssocArray[tKey] into tValuesArray[tCounter]
      end if
   end repeat
   
   return tValuesArray
end rigArrayValues

function rigArraySplice pArray pOffset, pLength
   --| Summary: Retrieve a portion of an array. Works with numbered arrays only.
   --| Parameters: array <pArray>, integer <pOffset>, integer <pLength>
   
   if (pLength is not an integer) or (pLength < 1) or (pOffset is not an integer) then
      return pArray
   end if
   
   put the number of lines in the keys of pArray into tKeysNum
   put the keys of pArray into tKeysList
   
   put 1 + pOffset into tStartLine
   put (tStartLine + pLength) -1 into tEndLine
   
   sort lines of tKeysList numeric
   
   put line tStartLine to tEndLine of tKeysList into tNewKeysList
   
   put 0 into tCounter
   repeat for each line thisLine in tNewKeysList
      add 1 to tCounter
      if tCounter <= tKeysNum then
         put pArray[thisLine] into tNewArray[tCounter]
      else
         exit repeat
      end if
   end repeat
   
   return tNewArray
end rigArraySplice

function rigImplode pArray, pGlue
   --| Requires: rigIsNumberedArray(), rigNumToCodepoint()
   --| Summary: Joins array elements with a string.
   --| Parameters: array <pArray>, string <pGlue> the string to join the array elements with
   
   if item 1 of rigIsNumberedArray(pArray) is "true" then
      # SORT ARRAY KEYS
      put the keys of pArray into tKeys
      sort tKeys numeric
      
      # BUILD STRING
      repeat for each line k in tKeys
         put pArray[k] & pGlue after tBuf
      end repeat
      
      # REMOVE LAST GLUE
      get the len of pGlue
      delete char - it to -1 of tBuf
   else
      # ARRAY IS NOT NUMBERED
      put pArray into tBuf
      combine tBuf using rigNumToCodepoint(1)
      replace rigNumToCodepoint(1) with pGlue in tBuf
   end if
   
   return tBuf
end rigImplode

function rigElementsList pArray
   --| Summary: Returns a list of array elements, each on a seperate line.
   repeat for each element thisElement in pArray
      put thisElement & return after tElementsList
   end repeat
   delete char -1 of tElementsList
   return tElementsList
end rigElementsList

function rigArrayMerge pArrayA, pArrayB, pFirstDelim, pSecondDelim
   --| Summary: Merge two one dimnensional arrays.
   
   put pArrayA into tArrayToReturn
   put pArrayB into tArrayToAppend
   
   if pFirstDelim is empty then
      put return into tFirstDelim
   else
      put pFirstDelim into tFirstDelim
   end if
   
   if pSecondDelim is empty then
      put comma into tSecondDelim
   else
      put pSecondDelim into tSecondDelim
   end if
   
   # MERGE LISTS
   if tArrayToReturn is an array then
      combine tArrayToReturn using tFirstDelim and tSecondDelim
   else
      put empty into tArrayToReturn
   end if
   
   if tArrayToAppend is an array then
      combine tArrayToAppend using tFirstDelim and tSecondDelim
   else
      put empty into tArrayToAppend
   end if
   
   if tArrayToReturn is not empty then
      if tArrayToAppend is not empty then
         put tFirstDelim & tArrayToAppend after tArrayToReturn
      end if
   else
      if tArrayToAppend is not empty then
         put tArrayToAppend into tArrayToReturn
      end if
   end if
   
   #BUILD ARRAY AGAIN
   split tArrayToReturn using tFirstDelim and tSecondDelim
   
   return tArrayToReturn
end rigArrayMerge
