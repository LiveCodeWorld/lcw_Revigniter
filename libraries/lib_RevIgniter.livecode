script "lib_RevIgniter"
--> MetaData
-
copyright: David Bovill
license: GPLv3
name: lib_RevIgniter
type: library
version: 0.6


/*
This library contains code for interfacing with revIgniter code and libraries.

It is desinged to be used for manipulation of remote server scripts in standard RevIgniter folders.
The code to access local copies of files should be in "lib_RevigniterTools"
*/


--> Rig | Model
-
command rig_EditController shortFile   
   rig_DownloadScriptAndCreateStack shortFile
   put the result into scriptStackFile
   edit the script of stack scriptStackFile
   ide_SetScriptEditorTitles "Revigniter"
   return scriptStackFile
end rig_EditController

command rig_DeleteController shortControllerFile, serverTLD
   rig_CheckFileForDeletion shortControllerFile, serverTLD
   put the result into serverFilePath
   --
   put server_GetURL() into remoteDomain
   put server_GetSshUser() into sshUser
   ssh_DeleteFile sshUser, remoteDomain, serverFilePath
   put the result into shellResult
   return shellResult
end rig_DeleteController

function rig_FetchController shortFile, pServerURL
   put rig_GetFolder ("controllers") & shortFile into somePath
   put rig_FetchFile (somePath, pServerURL) into someData
   return someData
end rig_FetchController

function rig_FetchStack shortFile, pServerURL
   put rig_GetFolder ("stacks") & shortFile into somePath
   put rig_FetchFile (somePath, pServerURL) into someData
   return someData
end rig_FetchStack

function rig_FetchSystemHelper shortFile, pServerURL
   put rig_GetFolder ("helpers") & shortFile into somePath
   put rig_FetchFile (somePath, pServerURL) into someData
   return someData
end rig_FetchSystemHelper

function rig_FetchProjectFile shortFile, shortFolder, pServerURL  
   put rig_GetFolder ("helpers") & shortFile into somePath
   put rig_FetchFile (somePath, pServerURL) into someData
   return someData
end rig_FetchProjectFile

function rig_FetchSystemFile shortStackFile, shortFolder, pServerURL  
   put rig_GetSystemFolder (shortFolder) & shortStackFile into somePath
   put rig_FetchFile (somePath, pServerURL) into someData
   return someData
end rig_FetchSystemFile

command rig_StoreController shortFile, rigScript
   put rig_ApplicationPath ("controllers/" & shortFile) into somePath
   rig_StoreData rigScript, somePath
   put the result into shellResult
   return shellResult
end rig_StoreController

command rig_StoreStacks stackNames
   repeat for each line stackName in stackNames
      set the cursor to busy
      rig_StoreStack stackName
   end repeat
end rig_StoreStacks

command rig_StoreStack stackName
   if exists (stack stackName) is false then
      return merge ("error, stack '[[stackName]]' does not exist")
   end if
   
   put the name of stack stackName into stackObject
   set the behavior of stack stackName to empty -- hack to prevent missing behaviors on server
   save stackObject
   
   put the filename of stack stackName into localFile
   set the itemdelimiter to slash
   put item -1 of localFile into shortFile
   put rig_GetFolder ("stacks") & shortFile into somePath
   
   rig_UploadLocalFile localFile, somePath
   return the result
end rig_StoreStack


--> Working on
-
function rig_GetOveride
   if exists (stack "behavior_RigLocalOveride") is false then return empty
   --
   get the frontScripts
   put the long id of stack "behavior_RigLocalOveride" is among the lines of it into someBoolean
   return someBoolean
end rig_GetOveride

command rig_SetOveride someBoolean
   if someBoolean is true then
      insert the script of stack "behavior_RigLocalOveride" into front
   else
      remove the script of stack "behavior_RigLocalOveride" from front
   end if
end rig_SetOveride

function rig_GetServerApplicationFolder pServerURL
   put server_GetProperty ("rigApplicationFolder", pServerURL) into rigApplicationFolder
   text_AddTrailing Rig_ApplicationFolder, "/" -- should be on storing and not reading
   return rigApplicationFolder
end rig_GetServerApplicationFolder


--> LCW | Shell
-
command lcw_DoRemoteShell remoteShell
   -- ssh fortyfoxes@rest.livecode.world
   ssh_DoRemoteShell "fortyfoxes", "rest.livecode.world", remoteShell
   put the result into shellResult
   return shellResult
end lcw_DoRemoteShell

function lcw_FetchKnownHosts
   put "/home/fortyfoxes/.ssh/known_hosts" into somePath
   put ssh_FetchFile ("fortyfoxes", "rest.livecode.world", somePath) into knownHosts
   return knownHosts
end lcw_FetchKnownHosts

function lcw_FetchFile somePath
   put ssh_FetchFile ("fortyfoxes", "rest.livecode.world", somePath) into someData
   return someData
end lcw_FetchFile

function lcw_FetchWikiFolderList pListAll
   put "/home/fortyfoxes/.ssh" into folderPath
end lcw_FetchWikiFolderList

function lcw_FetchFolderList folderPath, pListAll
   put "ls" into someCommand
   if pListAll is true then put space & "-la" after someCommand
   put someCommand && folderPath into remoteShell
   --
   lcw_DoRemoteShell remoteShell
   return the result
end lcw_FetchFolderList


--> Rig | SSH | Model
-
/*
Upload and list things on a revIgniter server using ssh
These need refactoring to see how they relate to server_ and atopia_ libs
*/

function rig_FetchPathArray someFolder
   put server_GetURL() into serverURL
   put server_GetSshUser() into sshUser
   put server_GetSshKeyPath() into sshKeyPath
   put server_FetchFileArray (serverURL, sshUser, someFolder, sshKeyPath) into fileAndFolderArray
   
   -- this does not take into account any nested controller folders
   put fileAndFolderArray ["file"] into filePathArray
   return filePathArray
end rig_FetchPathArray

function rig_FetchFile somePath, pServerURL
   -- conservative and careful
   local oServerURL
   
   -- let's see if a different serverURL is currently loaded
   put server_GetURL() into oServerURL
   put pServerURL is not oServerURL AND pServerURL is not empty into needsLoading
   if needsLoading then
      -- load new one
      server_SetURL pServerURL
   end if
   
   -- we know the right server details have been loaded
   put server_GetURL() into serverAddress
   put server_GetSshUser() into sshUser
   
   -- safely fetch the file
   put server_FetchFile (somePath, serverAddress, sshUser) into stackOrScript
   
   -- restore if needsLoading
   if needsLoading then
      server_SetURL oServerURL
   end if
   return stackOrScript
end rig_FetchFile

command rig_StoreStackData shortFile, stackData
   -- put rig_ApplicationPath ("stacks/" & shortFile) into somePath
   put rig_GetFolder ("stacks") & shortFile into somePath
   rig_StoreData stackData, somePath
   return the result
end rig_StoreStackData

command rig_UploadLocalFile localFile, pathToStore
   put server_GetURL() into serverAddress
   put server_GetSshUser() into sshUser
   server_StoreFile localFile, pathToStore, serverAddress, sshUser
   put the result into shellResult
   return shellResult
end rig_UploadLocalFile

command rig_StoreData someData, somePath
   put server_GetURL() into serverAddress
   put server_GetSshUser() into sshUser
   server_StoreData someData, somePath, serverAddress, sshUser
   put the result into someResult
   return someResult
end rig_StoreData


--> Rig | List
-
function rig_ListControllerFiles
   put rig_GetFolder ("controllers") into someFolder
   put rig_ListFiles (someFolder) into shortFiles
   return shortFiles
end rig_ListControllerFiles

function rig_ListHelperFiles
   put rig_GetFolder ("helpers") into someFolder
   put rig_ListFiles (someFolder) into shortFiles
   return shortFiles
end rig_ListHelperFiles

function rig_ListStackFiles
   put rig_GetFolder ("stacks") into someFolder
   put rig_ListFiles (someFolder) into shortFiles
   return shortFiles
end rig_ListStackFiles

function rig_ListSystemHelperFiles
   put rig_GetSystemFolder ("helpers") into someFolder
   put rig_ListFiles (someFolder) into shortFiles
   return shortFiles
end rig_ListSystemHelperFiles

function rig_ListFiles someFolder
   put rig_FetchPathArray (someFolder) into fileArray
   delete variable fileArray ["index.html"]
   delete variable fileArray ["welcome.lc"]
   put keys (fileArray) into shortFiles
   sort shortFiles
   return shortFiles
end rig_ListFiles


--> Rig | Path | Array
-
function rig_FetchStackPathArray
   put rig_StackFolder() into stackFolder
   put rig_FetchPathArray (stackFolder) into fileArray
   return fileArray
end rig_FetchStackPathArray

function rig_FetchControllerPathArray
   put rig_ControllerFolder () into controllerFolder
   put rig_FetchPathArray (controllerFolder) into fileArray
   return fileArray
end rig_FetchControllerPathArray


--> Rig | Check
-
command rig_CheckFiles shortFiles, pIndexView
   repeat for each line shortFile in shortFiles
      set the cursor to busy
      display_Spin shortFile, pIndexView
      put the result into selectedLineNum
      --
      rig_CheckAndSaveFile shortFile, pIndexView
      put the result into changedWords
      put word 1 of changedWords into changedHow
      put word 2 of changedWords into lineNum
      put lineNum into resultArray [changedHow][shortFile]
   end repeat
   set the hilited_lines of pIndexView to empty
   return resultArray
end rig_CheckFiles

command rig_CheckAndSaveFile shortFile, pIndexView
   put rig_FetchStack (shortFile) into remoteStackData
   put stack_ExtractScriptOnlyName (remoteStackData) into stackName
   if exists (stack stackName) then
      save stack stackName
      --
      put the stack_Data of stack stackName into localStackData
      if word 1 to -1 of localStackData = word 1 to -1 of remoteStackData then
         -- for some reason local stacks have an additional space at the end
         if exists (pIndexView) then
            put the line_Number [shortFile] of pIndexView into lineNum
            set the line_Colour [lineNum] of pIndexView to "dark green"
         end if
         return "good" && lineNum
      else
         if exists (pIndexView) then
            put the line_Number [shortFile] of pIndexView into lineNum
            set the line_Colour [lineNum] of pIndexView to "blue"
         end if
         return "changed" && lineNum
      end if
   else
      if exists (pIndexView) then
         put the line_Number [shortFile] of pIndexView into lineNum
         set the line_Colour [lineNum] of pIndexView to "red"
      end if
      return "missing" && lineNum
   end if
end rig_CheckAndSaveFile


--> Rig | Model
-
/*
Used by a revIgniter server to access local files
*/

function rig_GetJson jsonAssetPath
   put rigReadFile (jsonAssetPath) into resultJSON
   return resultJSON
end rig_GetJson

command rig_SetJson jsonAssetPath, resultJSON
   if rigWriteFile (jsonAssetPath, resultJSON) is FALSE then
      return "Error, unable to write the file"
   else
      return "Great!" && jsonAssetPath
   end if
end rig_SetJson


--> Rig
-
function rig_StackIsSameAsLocal shortFile
   put rig_FetchStack (shortFile) into remoteStackData
   put stack_ExtractScriptOnlyName (remoteStackData) into stackName
   put the stack_Data of stack stackName into localStackData
   put localStackData = remoteStackData into isSame
   return isSame
end rig_StackIsSameAsLocal


--> Rig | Folders
-
function rig_GetApplicationFolder
   if the environment = "server" then -- revIgniter version
      put gAPPPATH into rigApplicationFolder
   else
      -- from stored serverArray
      -- useful for local clinet operations on remote server
      put rig_GetServerApplicationFolder() into rigApplicationFolder
   end if
   text_AddTrailing rigApplicationFolder, "/"
   return rigApplicationFolder
end rig_GetApplicationFolder

function rig_GetSystemFolder pFolder
   -- quick hack
   -- this depends on the site specific configuration
   -- ie is it configured to have multiple sites
   
   if the environment = "server" then
      put gAPPPATH into rigSystemFolder
   else
      put rig_GetServerApplicationFolder() into rigSystemFolder
   end if
   
   -- here is the hack :)
   set the itemdelimiter to "/"
   if server_GetURL() = "livecode.world" then
      delete item -1 of rigSystemFolder
   else
      delete item -2 to -1 of rigSystemFolder
   end if
   
   text_AddTrailing rigSystemFolder, "/"
   if pFolder is not empty then
      put pFolder & "/" after rigSystemFolder
   end if
   return rigSystemFolder
end rig_GetSystemFolder

function rig_ControllerFolder
   if the environment = "server" then return gAPPPATH & "controllers/"
   
   put rig_GetFolder ("controllers") into someFolder
   return someFolder
end rig_ControllerFolder

function rig_HelperFolder
   put rig_GetFolder ("helpers") into someFolder
   return someFolder
end rig_HelperFolder

function rig_StackFolder
   put rig_GetApplicationFolder() into someFolder
   put "stacks/" after someFolder
   return someFolder
end rig_StackFolder

function rig_GetFolder shortFolder
   put rig_GetApplicationFolder() into someFolder
   put shortFolder & "/" after someFolder
   return someFolder
end rig_GetFolder


--> Rig | Files
-
function rig_StackPath shortPath
   put rig_GetApplicationFolder() into rigApplicationFolder
   put rigApplicationFolder & shortPath into serverStackPath
   return serverStackPath
end rig_StackPath

function rig_ControllerPath pShortControllerFile
   put rig_ApplicationPath ("controllers/" & pShortControllerFile) into somePath
   return somePath
end rig_ControllerPath

function rig_ApplicationPath pShortpath
   put rig_GetApplicationFolder() into rigApplicationPath
   if pShortpath is not empty then put pShortpath after rigApplicationPath
   return rigApplicationPath
end rig_ApplicationPath


--> Rig | Delete
-
command rig_CheckFileForDeletion shortControllerFile, serverTLD
   -- here we do as many checks as we can
   put server_GetURL() into remoteDomain
   put server_GetSshUser() into sshUser
   put rig_GetFolder ("controllers") & shortControllerFile into serverFilePath
   --
   put server_FileInfoArray (serverFilePath) into fileArray
   set the itemdelimiter to slash
   put item -1 of serverFilePath into shortFile
   set the itemdelimiter to comma
   --
   switch
      case sshUser = "root"
         put merge ("Not advisable to use root user to delete files!") into someComment
         lcw_AnswerWarning someComment
      case serverTLD is not serverTLD
         put merge ("Requested domain [[serverTLD]]does not match loaded domain [[remoteDomain]].") into someComment
         lcw_AnswerWarning someComment
      case fileArray ["isFolder"] is true
         put merge ("Did not delete folder from [[remoteDomain]]. rig_DeleteStack does not allow deletion of folders.") into someComment
         lcw_AnswerWarning someComment
      case fileArray ["file"] is empty
         put merge ("Did not delete file [[shortFile]] from [[remoteDomain]]. It does not exist.") into someComment
         lcw_AnswerWarning someComment
      case fileArray ["fileExtension"] is not among the items of "lc,livecode,rev,livecodescript"
         put merge ("Did not delete file [[shortFile]] from [[remoteDomain]]. It was not a stack.") into someComment
         lcw_AnswerWarning someComment
      default
         return serverFilePath -- it's a livecode file
   end switch
end rig_CheckFileForDeletion

command rig_DeleteStack shortStackFile, pDontNotify
   -- should really do this checking on the shortStackFile first
   put rig_GetFolder ("stacks") & shortStackFile into stackPath
   put server_GetURL() into remoteDomain
   put server_GetSshUser() into sshUser
   
   -- should do some checks to make sure it is a stack and not a folder?
   put server_FileInfoArray (stackPath) into fileArray
   switch
      case fileArray ["isFolder"] is true
         put merge ("Did not delete folder from [[remoteDomain]]. rig_DeleteStack does not allow deletion of folders.") into someComment
         if pDontNotify is not true then lcw_Notify someComment
         return someComment
      case fileArray ["file"] is empty
         put merge ("Did not delete file [[shortStackFile]] from [[remoteDomain]]. It does not exist.") into someComment
         if pDontNotify is not true then lcw_Notify someComment
         return someComment
      case fileArray ["fileExtension"] is not among the items of "lc,livecode,rev,livecodescript"
         put merge ("Did not delete file [[shortStackFile]] from [[remoteDomain]]. It was not a stack.") into someComment
         if pDontNotify is not true then lcw_Notify someComment
         return someComment
      default
         -- it's a livecode file
         ssh_DeleteFile sshUser, remoteDomain, stackPath
         put the result into someResult
         
         if pDontNotify is not true then
            put merge ("Deleted stack [[shortStackFile]] from [[remoteDomain]]!") into someComment
            lcw_Notify someComment
         end if
         return someResult
   end switch
end rig_DeleteStack


--> Rig | Use
-
command rig_UseShortLibs shortFiles, pLibPath
   if the platform is not "server" then return false
   
   replace comma with CR in shortFiles
   if pLibPath is empty then
      put "/var/www/html/system/application/rest.livecode.world/stacks/" into pLibPath
   end if
   repeat for each line shortFile in shortFiles
      put pLibPath & shortFile into libFile
      if exists (stack libFile) then
         start using stack libFile
      end if
   end repeat
   return true
end rig_UseShortLibs


--> Rig | Assets
-
command rig_AssetFetchAndSaveImage imageURL, pUseCurl
   set the itemdelimiter to slash
   put item -1 of imageURL into shortFile
   put rig_AssetImageFolder() into imageAssetFolder
   put imageAssetFolder & shortFile into imagePath
   
   put shortFile into resultArray ["shortFile"]
   put there is a file imagePath into resultArray ["file exists"]
   put imageAssetFolder into resultArray ["imageAssetFolder"]
   put imagePath into resultArray ["imagePath"]
   put "https://rest.livecode.world/assets/img/" & shortFile into assetURL
   put assetURL into resultArray ["assetURL"]
   
   set the defaultfolder to imageAssetFolder
   if pUseCurl is true then
      put "curl -O" && kwote (imageURL) into someShell
      put shell (SomeShell) into fetchResult
      put shellResult into resultArray ["shellResult"]
   else
      put url imageURL into url ("binfile:" & imagePath)
      if the result is not empty then
         put the result into resultArray ["shellResult"]
      end if
   end if
   
   put exif_GetInfoArray (imagePath) into exifArray
   put exifArray into resultArray ["exifArray"]
   
   return resultArray
end rig_AssetFetchAndSaveImage

function rig_AssetImageFile shortFile
   put rig_AssetImageFolder() & shortFile into imageFile
   return imageFile
end rig_AssetImageFile

function rig_AssetImageFolder
   switch the platform
      case "MacOS"
         return "/Users/BabyBlue/Pictures/OSCEDays Bilbao/"
      default
         put the defaultfolder & "/assets/img/" into imageFolder
         return imageFolder
   end switch
end rig_AssetImageFolder


--> revIgniter
-
function rig_ConstructRouteArray
   -- this code is taken directly from routes.lc
   -- maybe it should use introspection on get access to global gRoute on server
   -- is there a revIgnitor function for this?
   
   put "api/bookget/$1" into gRoute[8]["api/book/get/(:any)"]
   put "api/bookupdate/$1" into gRoute[9]["api/book/update/(:any)"]
   put "api/bookinsert/$1" into gRoute[10]["api/book/new/(:any)"]
   put "api/savecover/$1" into gRoute[11]["api/book/setcover/(:any)"]
   put "books/sender/$1/$2" into gRoute[12]["books/(:any)/web/(:any)"]
   put "listen/index/$1/mp3" into gRoute[13]["listen/(:any)"]
   put "listen/index/$1/$2" into gRoute[14]["listen/(:any)/(:any)"]
   put "bodhinatha" into gRoute[29]["bodhinatha/:any"]
   put "manager" into gRoute[15]["manager/:any"]
   put "info" into gRoute[15]["info/:any"]
   put "monastery" into gRoute[16]["monastery/:any"]
   put "readlearn" into gRoute[17]["readlearn/:any"]
   put "looklisten" into gRoute[18]["looklisten/:any"]
   put "donations/student-donate" into gRoute[26]["livespiritually/become-student/donate"]
   put "livespiritually" into gRoute[19]["livespiritually/:any"]
   put "visit" into gRoute[27]["visit/:any"]
   put "donations" into gRoute[20]["donations/:any"]
   put "site/viewmedia/$1" into gRoute[21]["view/(:any)"]
   put "site/downloadfile/$1" into gRoute[22]["download/(:any)"]
   put "cloudreader/readbook/$1" into gRoute[23]["readbook/(:any)"]
   put "site/reviews/$1" into gRoute[24]["reviews/(:any)"]
   put "cloudreader/simplereader/$1" into gRoute[25]["book/(:any)"]
   put "cloudreader/simplereader/$1/$2" into gRoute[26]["book/(:any)/(:any)"]
   # put "cloudreader/simplereader/$1/$2" into gRoute[27]["media/books/(:any)/web/ops/xhtml/(:any)"]
   put "cloudreader/bookPageToSpineNo/$1/$2" into gRoute[27]["media/books/(:any)/web/ops/xhtml/(:any)"]
   put "site/viewmedia/$1" into gRoute[28]["apps/(:any)"]
   
   return gRoute
end rig_ConstructRouteArray


--> revIgniter | Wiki
-
function rig_ConstructFedwikiPageArray headerPageArray
   local lookUpArray, markdownTOC, pVersionNum
   
   put headerPageArray [1] into topSectionArray
   put topSectionArray ["@attributes"]["title"] into pageTitle
   put topSectionArray ["@content"] into rigPageContentArray
   put pageTitle into fedwikiPageArray ["title"]
   rig_AddContentToFedwikiPageArray fedwikiPageArray, rigPageContentArray
   
   -- make a TOC
   rig_ConstructMarkdownToc topSectionArray, 1, lookUpArray, markdownTOC
   put "# TOC" & CR before markdownTOC
   pageArray_AddMarkdown fedwikiPageArray, markdownTOC
   
   put rig_ConstructSourceArray (pageTitle, sourceUrl, lookUpArray, pVersionNum) into sourceArray
   put pageArray_ConstructJournal (pageTitle, sourceArray) into fedwikiPageArray ["journal"]
   
   return fedwikiPageArray
end rig_ConstructFedwikiPageArray

private function rig_ConstructSourceArray pageTitle, sourceUrl, lookUpArray, pVersionNum
   put "https://livecode.world/revIgniter/transportAgain" into transportURL
   put "https://github.com/LiveCodeWorld/revIgniter,lc" into repoURL
   put the milliseconds into dateTransported
   
   put fedwiki_ConstructCreateSourceArray (transportURL, sourceUrl, dateTransported, repoURL, pVersionNum) into pSourceArray
   put pageTitle into pSourceArray ["pageTitle"]
   if lookUpArray is an array then
      put lookUpArray into pSourceArray ["link_dictionary"]
   end if
   return pSourceArray
end rig_ConstructSourceArray

private command rig_ConstructMarkdownToc sectionArray, sectionPath, @lookUpArray, @markdownTOC
   put (the number of lines of the keys of sectionArray) - 2 into subSectionNum
   repeat with sectionNum = subSectionNum down to 1
      put sectionArray [sectionNum] into subSectionArray
      put subSectionArray ["@attributes"] into attributeArray
      put attributeArray ["title"] into sectionTitle
      put attributeArray ["level"] into sectionLevel
      
      put sectionPath & comma & sectionNum into subSectionPath
      put subSectionPath into lookUpArray [sectionTitle]["sectionPath"]
      put sectionLevel into lookUpArray [sectionTitle]["sectionLevel"]
      put sectionNum into lookUpArray [sectionTitle]["sectionNum"]
      
      -- don't really need this as the idea is to fetch it with sectionPath and sourceURL
      put subSectionArray ["@content"] into lookUpArray [sectionTitle]["@content"]
      
      put "* [[" & sectionTitle & "]]" & CR before markdownTOC
   end repeat
   delete char -1 of markdownTOC
end rig_ConstructMarkdownToc

command rig_AddContentToFedwikiPageArray @fedwikiPageArray, sectionContentArray
   repeat for each key itemNum in sectionContentArray
      put sectionContentArray [itemNum] into someHTML
      
      -- here we can tidy and process each section
      switch
         default
            pageArray_AddHtml fedwikiPageArray, someHTML
      end switch
   end repeat
end rig_AddContentToFedwikiPageArray

command rig_CleanHandlerNames @someContent
   put "[^\)]*" into notaBracket
   put "\(" & notaBracket & "\)" into someReg
   put "\n" after someReg
   put word 1 to -1 of replaceText (someContent, someReg, empty) into someContent
end rig_CleanHandlerNames


--> Server | Remote | Scripts
-
function rig_RoutingScript
   -- was "rig_RoutingScript"
   put rig_ApplicationPath() & "/config/routes.lc" into somePath
   put server_GetURL() into serverAddress
   put server_GetSshUser() into sshUser
   put server_FetchFile (somePath, serverAddress, sshUser) into rigScript
   return rigScript
end rig_RoutingScript


--> Private | revIgniter
-
private function text_Indent someText
   -- this is the minimal version of "outline_IncreaseIndent"
   repeat with lineNum = 1 to the number of lines of someText
      put tab before line lineNum of someText
   end repeat
   return someText
end text_Indent

private command text_Indent @someText, pIndentChars
   if pIndentChars is empty then put "   " into pIndentChars
   repeat for each line someLine in someText
      put pIndentChars & someLine & CR after newText
   end repeat
   delete char -1 of newText
   put newText into someText
end text_Indent
